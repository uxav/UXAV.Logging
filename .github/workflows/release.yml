# This is a basic workflow to help you get started with Actions

name: Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

env:
  PROJECT_NAME: UXAV.Logging

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup .NET Core
        id: setup-dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x
          cache: true
          cache-dependency-path: "${{ env.PROJECT_NAME }}/packages.lock.json"

      - name: Check version number
        id: check-version
        if: startsWith(github.head_ref, 'release/')
        run: |
          version=$(grep -o '<Version>.*</Version>' **/${{ env.PROJECT_NAME }}/Directory.Build.props | sed 's/<Version>\(.*\)<\/Version>/\1/')
          if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $version"
            exit 1
          fi
          versionTagToCheck="v$version"
          echo "Version tag to check is $versionTagToCheck"
          git fetch --tags
          tags=$(git tag --list)
          echo "Looking at tags:\n$tags"
          for tag in $tags; do
          if [[ "$tag" == "$versionTagToCheck" ]]; then
            echo "Version tag $versionTagToCheck exists"
            exit 1
          fi
          done
          echo "Version tag $versionTagToCheck does not exist"
          echo "TAG=$versionTagToCheck" >> $GITHUB_ENV
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "VERSION_TITLE=Release v$version" >> $GITHUB_ENV

      - name: Restore nuget packages
        id: restore
        run: dotnet restore ${{ env.PROJECT_NAME }}

      - name: Build
        id: build
        run: dotnet build ${{ env.PROJECT_NAME }} -c Release -v m --no-restore

      - name: Pack
        id: pack
        run: dotnet pack ${{ env.PROJECT_NAME }} -c Release -v m --no-build --output nupkgs

      - name: Create release
        id: create_release
        if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.TAG }}
          name: Release ${{ env.VERSION_TITLE }}
          draft: false
          prerelease: false
          artifacts: |
            nupkgs/*.nupkg

      - name: Publish to GitHub
        id: publish_github
        if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
        run: dotnet nuget push nupkgs/*.nupkg --source https://nuget.pkg.github.com/uxav/index.json --api-key ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NuGet
        id: publish_nuget
        if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')
        run: dotnet nuget push nupkgs/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_UXAV_API_KEY }}
